def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "### ERROR ### The option '-profile singularity' requires the singularity images to be installed on your system. See --singularityImagePath for advanced usage."
      System.exit(-1)
    }
  }else{
    println "### ERROR ### Singularity image path [${path}] not found with. See --singularityImagePath for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = "${params.geniac.containers.singularityRunOptions}"
}

process {
  checkProfileSingularity("${params.geniac.singularityImagePath}")
  withLabel:python { container = "${params.singularityImagePath}/python.simg" }
  withLabel:fastqc { container = "${params.singularityImagePath}/fastqc.simg" }
  withLabel:bwa { container = "${params.singularityImagePath}/bwa.simg" }
  withLabel:bowtie2 { container = "${params.singularityImagePath}/bowtie2.simg" } 
  withLabel:samtools { container = "${params.singularityImagePath}/samtools.simg" } 
  withLabel:picard { container = "${params.singularityImagePath}/picard.simg" } 
  withLabel:preseq { container = "${params.singularityImagePath}/preseq.simg" } 
  withLabel:r { container = "${params.singularityImagePath}/chipseqr.simg" } 
  withLabel:deeptools { container = "${params.singularityImagePath}/deeptools.simg" } 
  withLabel:macs2 { container = "${params.singularityImagePath}/macs2.simg" } 
  withLabel:genrich { container = "${params.singularityImagePath}/genrich.simg" }
  withLabel:homer { container = "${params.singularityImagePath}/homer.simg" }
  withLabel:bedtobigbed { container = "${params.singularityImagePath}/bedtobigbed.simg" } 
  withLabel:multiqc { container = "${params.singularityImagePath}/multiqc.simg" } 
}